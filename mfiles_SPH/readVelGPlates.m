function [Ucolat_Ulon,LatLon,PlateID,plateid2name] = readVelGPlates(VelGPlatesFileName)
% Usage: [Ucolat_Ulon,LatLon,PlateID,plateid2name] = readVelGPlates(VelGPlatesFileName)
% 
% Purpose: 
%   Read velocity output file generated by GPlates and transform it into a 
%   good internal matlab format.
%
%   IMPORTANT: 
%   Change the .xy extension of the file by .txt in order to MATLAB can
%   read the information properly.
%   
% Input:
%   VelGPlatesFileName : [char array] : Name of the file with data from
%                                       GPlates (must be a .txt file).
%                                       Velocities from GPlates are in
%                                       cm/yr
%
% Output:
%   Ucolat_Ulon        : [matrix]    : Velocity (colatitude, longitude) on 
%                                      surface nodes computed using GPlates 
%                                      (2 x nnod)(mm/yr) == (km/Myr)
%   LatLon             : [matrix]    : Latitude and Longitude of surface 
%                                      nodes (2 x nnod)(degrees)
%   PlateID            : [vector]    : Plate IDs
%   plateid2name       : [structure] : plate names related with plate ids
%
% JMT Aug 2016
% JMT Feb 2017: added PlateID and plateid2name

if nargin == 0
    VelGPlatesFileName = '0.00Ma.txt';
end

%==========================================================================
% READ THE FILE
%==========================================================================
fid = fopen(VelGPlatesFileName,'r'); % open input file
% ii=0;
% while ~feof(fid) % while not at end of file
%     ii=ii+1;
%     inputline = fgetl(fid);
%     LatLon(ii,1:2)      =  sscanf(inputline,'%f %f %*f %*f %*f');
%     PlateID(ii,1)       =  sscanf(inputline,'%*f %*f %f %*f %*f');
%     Ucolat_Ulon(ii,1:2) =  sscanf(inputline,'%*f %*f %*f %f %f');
%     % %*s means DONT scan string (char) variable, and %*f means DONT scan floating point
% end
tmp         = fscanf(fid, '%f');
tmp         = reshape(tmp,5,[])';
LatLon      = tmp(:,1:2);
PlateID     = tmp(:,3);
Ucolat_Ulon = tmp(:,4:5);
fclose(fid); % close input file

%==========================================================================
% CREATE STRUCTURE TO RELATE PLATE NAMES WITH PLATE IDS
%==========================================================================
% List of plates (130 Myr to 100 Myr) from Caltech_Global_20101129.rot (Gurnis et al. 2012)
% It may need to be updated for other times 
plate_ids   = [ 101   103   119   201   301   304   409   607   701   702   801   901   902   919   926]';
plate_names = ['NAM';'NSL';'AAB';'SAM';'EUR';'SPN';'NES';'BMP';'AFR';'MAD';'AUS';'PAC';'FAR';'PHX';'IZA'];
%   101 -> NAM (North America) 
%   103 -> NSL (North Slope Alaska)
%   119 -> AAB (Amerasia Basin)
%   201 -> SAM (South America) 
%   301 -> EUR (Northern European Craton)
%   304 -> SPN (Iberia)
%   409 -> NES (North East Siberia)
%   607 -> BMP (Burma Plate)
%   701 -> AFR (Africa)
%   702 -> MAD (Madagascar)
%   801 -> AUS (Australia)
%   901 -> PAC (Pacific)
%   902 -> FAR (Farallon)
%   919 -> PHX (Phoenix)
%   926 -> IZA (Izanai Plate 1)

plates  = unique(PlateID);
if any(plates == 0)
    % It means that some surface points are on the plate boundary and GPlates could not
    % assign a PlateID -> Change it manually by the PlateID of the following point
    ind = find(PlateID == 0);
    for i=1:size(ind,1)
        PlateID_nb = [PlateID(ind(i) - 1); PlateID(ind(i) + 1)];
        PlateID_nb = PlateID_nb(PlateID_nb ~= 0);
        PlateID(ind(i)) = PlateID_nb(1);
    end
    plates  = unique(PlateID);
end
if any(~ismember(plates,plate_ids))
    error('"plate_ids" and "plate_names" need to be updated with "PlateID"')
end
% create structure
plateid2name(1:size(plate_ids,1)) = struct('plate_id'  ,0, ...
                                           'index'     ,0, ...
                                           'plate_abr' ,' ');
for i = 1:size(plate_ids,1)
    plateid2name(i).plate_id  = plate_ids(i);
    plateid2name(i).index     = i;
    plateid2name(i).plate_abr = plate_names(i,1:3);
end

%==========================================================================
% OUTPUT DATA
%==========================================================================
LatLon      = LatLon';
Ucolat_Ulon = Ucolat_Ulon' * 10; % velocity in mm/yr (= km/Myr)
for i = 1:size(plates,1)
    % assign to each PlateID (given by GPlates) an integer number
    PlateID(PlateID == plates(i)) = plateid2name(ismember(plate_ids,plates(i))).index;
end

end % END OF FUNCTION readVelGPlates